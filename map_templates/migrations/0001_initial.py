# Generated by Django 5.0.2 on 2024-02-28 08:31

import colorfield.fields
import django.core.validators
import django.db.models.deletion
import map_templates.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='FeatureGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom du groupe de fonctionnalités.', max_length=100)),
                ('overlay', models.BooleanField(default=True, help_text='Si le groupe de fonctionnalités est superposable (cochée avec une case à cocher) ou non (cochée avec un bouton radio).', verbose_name='Superposable')),
                ('control', models.BooleanField(default=True, help_text='Si le groupe de fonctionnalités est inclue dans le contrôle des couches.', verbose_name='Contrôlable')),
                ('show_on_startup', models.BooleanField(default=False, help_text='Si le groupe de fonctionnalités doit être affiché au démarrage.')),
            ],
            options={
                'verbose_name': 'Groupe de fonctionnalités',
                'verbose_name_plural': 'Groupes de fonctionnalités',
            },
        ),
        migrations.CreateModel(
            name='MapTemplate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom du modèle de carte.', max_length=100, unique=True, verbose_name='Nom du modèle')),
                ('zoom_start', models.SmallIntegerField(default=13, help_text='Le niveau de zoom initial de la carte.', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(18)], verbose_name='Niveau de zoom initial')),
                ('layer_control', models.BooleanField(default=True, help_text='Activer le contrôle des couches de la carte.', verbose_name='Activer le contrôle des couches')),
                ('zoom_control', models.BooleanField(default=True, help_text='Activer le contrôle du zoom de la carte.', verbose_name='Activer le contrôle du zoom')),
                ('task_id', models.CharField(blank=True, default=None, help_text='ID de la tâche asynchrone utilisée pour générer le rendu de la carte.', max_length=100, null=True, verbose_name='ID de la tâche')),
                ('generation_status', models.CharField(choices=[('PENDING', 'En attente'), ('RUNNING', 'En cours'), ('COMPLETED', 'Terminé'), ('FAILED', 'Échoué')], default='PENDING', help_text='Statut de la génération du rendu de la carte.', max_length=10, verbose_name='Statut de la génération')),
                ('regenerate', models.BooleanField(default=False, help_text='Relance la génération du rendu de la carte.', verbose_name='Regénérer')),
            ],
            options={
                'verbose_name': 'Modèle de carte',
                'verbose_name_plural': 'Modèles de carte',
            },
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('stroke', models.BooleanField(default=True, help_text='Indique si les bordures des formes doivent être dessinées.')),
                ('color', colorfield.fields.ColorField(default='#3388ff', help_text='La couleur des bordures des formes.', image_field=None, max_length=25, samples=None)),
                ('weight', models.FloatField(default=3, help_text="L'épaisseur des bordures des formes.", validators=[django.core.validators.MinValueValidator(0.0)])),
                ('opacity', models.FloatField(default=1.0, help_text="L'opacité des bordures des formes.", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('line_cap', models.CharField(choices=[('butt', 'Butt'), ('round', 'Round'), ('square', 'Square')], default='round', help_text='La terminaison des bordures des formes.', max_length=6)),
                ('line_join', models.CharField(choices=[('arcs', 'Arcs'), ('bevel', 'Bevel'), ('miter', 'Miter'), ('miter-clip', 'Miter-clip'), ('round', 'Round')], default='round', help_text='La jonction des bordures des formes.', max_length=10)),
                ('dash_array', models.CharField(blank=True, default=None, help_text='Chaîne de charactères définissant le motif de la bordure des formes.', max_length=50, null=True, validators=[map_templates.validators.validate_dash_array])),
                ('dash_offset', models.CharField(blank=True, default=None, help_text='Chaîne définissant la distance entre les motifs de la bordure des formes.', max_length=5, null=True)),
                ('fill', models.BooleanField(blank=True, default=False, help_text='Indique si les formes doivent être remplies.', null=True)),
                ('fill_color', colorfield.fields.ColorField(blank=True, default=None, help_text='La couleur de remplissage des formes. Si non défini, la couleur de bordure est utilisée.', image_field=None, max_length=25, null=True, samples=None)),
                ('fill_opacity', models.FloatField(default=0.2, help_text="L'opacité de remplissage des formes.", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('fill_rule', models.CharField(choices=[('nonzero', 'Nonzero'), ('evenodd', 'Evenodd')], default='evenodd', help_text='La règle de remplissage des formes.', max_length=100)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TileLayer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom de la tuile de carte.', max_length=100, unique=True, verbose_name='Nom')),
                ('verbose_name', models.CharField(blank=True, default=None, help_text="Le nom d'affichage de la tuile de carte. Laisser vide pour utiliser le nom par défaut.", max_length=100, null=True, unique=True, verbose_name="Nom d'affichage")),
                ('transparent', models.BooleanField(default=False, help_text='Si les tuiles de carte doivent être transparentes.', verbose_name='Transparence')),
                ('overlay', models.BooleanField(default=True, help_text='Si les tuiles de carte sont des superpositions.', verbose_name='Superposition')),
                ('control', models.BooleanField(default=True, help_text='Si les tuiles de carte peuvent être sélectionner.', verbose_name='Contrôle')),
                ('type', models.CharField(choices=[('builtin', 'Intégrée'), ('xyz', 'XYZ')], default='folium', help_text="Le type de tuile de carte.Si 'folium', la tuile est gérée par Folium et les autres champs sont ignorés.", max_length=7, verbose_name='Type')),
                ('url', models.URLField(blank=True, default=None, help_text="L'URL 'XYZ' de la tuile de carte.", max_length=500, null=True, verbose_name='URL')),
                ('attribution', models.CharField(blank=True, default=None, help_text="L'attribution de la tuile de carte.", max_length=200, null=True, verbose_name='Attribution')),
                ('access_token', models.CharField(blank=True, default=None, help_text="Le jeton d'accès de la tuile de carte.", max_length=100, null=True, verbose_name="Jeton d'accès")),
            ],
            options={
                'verbose_name': 'Tuile de carte',
                'verbose_name_plural': 'Tuiles de carte',
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom de la couche cartographique.', max_length=100)),
                ('show', models.BooleanField(default=False, help_text='Si la couche doit être affichée au démarrage.', verbose_name='Afficher au démarrage')),
                ('owner_feature_group', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layers', to='map_templates.featuregroup')),
                ('owner_map_template', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layers', to='map_templates.maptemplate')),
                ('highlight', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='highlight_of', to='map_templates.style')),
                ('style', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='style_of', to='map_templates.style')),
            ],
            options={
                'verbose_name': 'Couche',
                'verbose_name_plural': 'Couches',
            },
        ),
        migrations.AddField(
            model_name='featuregroup',
            name='map_template',
            field=models.ForeignKey(help_text='Le modèle de carte auquel appartient le groupe de fonctionnalités.', on_delete=django.db.models.deletion.CASCADE, related_name='feature_groups', to='map_templates.maptemplate', verbose_name='Modèle de carte'),
        ),
        migrations.CreateModel(
            name='PropertyStyle',
            fields=[
                ('stroke', models.BooleanField(default=True, help_text='Indique si les bordures des formes doivent être dessinées.')),
                ('color', colorfield.fields.ColorField(default='#3388ff', help_text='La couleur des bordures des formes.', image_field=None, max_length=25, samples=None)),
                ('weight', models.FloatField(default=3, help_text="L'épaisseur des bordures des formes.", validators=[django.core.validators.MinValueValidator(0.0)])),
                ('opacity', models.FloatField(default=1.0, help_text="L'opacité des bordures des formes.", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('line_cap', models.CharField(choices=[('butt', 'Butt'), ('round', 'Round'), ('square', 'Square')], default='round', help_text='La terminaison des bordures des formes.', max_length=6)),
                ('line_join', models.CharField(choices=[('arcs', 'Arcs'), ('bevel', 'Bevel'), ('miter', 'Miter'), ('miter-clip', 'Miter-clip'), ('round', 'Round')], default='round', help_text='La jonction des bordures des formes.', max_length=10)),
                ('dash_array', models.CharField(blank=True, default=None, help_text='Chaîne de charactères définissant le motif de la bordure des formes.', max_length=50, null=True, validators=[map_templates.validators.validate_dash_array])),
                ('dash_offset', models.CharField(blank=True, default=None, help_text='Chaîne définissant la distance entre les motifs de la bordure des formes.', max_length=5, null=True)),
                ('fill', models.BooleanField(blank=True, default=False, help_text='Indique si les formes doivent être remplies.', null=True)),
                ('fill_color', colorfield.fields.ColorField(blank=True, default=None, help_text='La couleur de remplissage des formes. Si non défini, la couleur de bordure est utilisée.', image_field=None, max_length=25, null=True, samples=None)),
                ('fill_opacity', models.FloatField(default=0.2, help_text="L'opacité de remplissage des formes.", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('fill_rule', models.CharField(choices=[('nonzero', 'Nonzero'), ('evenodd', 'Evenodd')], default='evenodd', help_text='La règle de remplissage des formes.', max_length=100)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=100)),
                ('value', models.CharField(max_length=100)),
                ('value_type', models.CharField(choices=[('string', 'String'), ('number', 'Number'), ('boolean', 'Boolean')], default='string', max_length=10)),
                ('style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_styles', to='map_templates.style')),
            ],
            options={
                'verbose_name': 'Style de propriété',
                'verbose_name_plural': 'Styles des propriétés',
            },
        ),
        migrations.AddField(
            model_name='maptemplate',
            name='tiles',
            field=models.ManyToManyField(help_text='Les tuiles de carte à charger sur la carte.', to='map_templates.tilelayer', verbose_name='Tuiles de carte'),
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=100)),
                ('operator', models.CharField(choices=[('==', '=='), ('!=', '!='), ('>', '>'), ('>=', '>='), ('<', '<'), ('<=', '<=')], max_length=100)),
                ('value', models.CharField(max_length=100)),
                ('value_type', models.CharField(choices=[('string', 'String'), ('number', 'Number'), ('boolean', 'Boolean')], default='string', max_length=10)),
                ('layer', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='filters', to='map_templates.layer')),
            ],
            options={
                'verbose_name': 'Filtre',
                'verbose_name_plural': 'Filtres',
                'unique_together': {('layer', 'key', 'operator', 'value')},
            },
        ),
    ]
